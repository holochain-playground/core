{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/core/cell/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,SAAS,GAIV,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAE7C,MAAM,UAAU,SAAS,CAAC,KAAY;IACpC,IAAI,KAAK,CAAC,UAAU,KAAK,OAAO;QAAE,OAAO,KAAK,CAAC,OAAO,CAAC;IACvD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,eAAe,CAC7B,SAAoB;IAEpB,IAAK,SAAmC,CAAC,GAAG;QAC1C,OAAQ,SAAmC,CAAC,GAAG,CAAC;IAClD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,SAAoB;IACrD,MAAM,YAAY,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;IAChD,YAAY;IACZ,IAAI,YAAY;QAAE,OAAO,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;IAEpD,OAAO,SAAmB,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAY;IACxC,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,SAAS,CAAC,YAAY;YACzB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5B,KAAK,SAAS,CAAC,UAAU;YACvB,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;QAChD,KAAK,SAAS,CAAC,sBAAsB;YACnC,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC;QAC5D,KAAK,SAAS,CAAC,qBAAqB;YAClC,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;QAC5C,KAAK,SAAS,CAAC,eAAe;YAC5B,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;QAClD,KAAK,SAAS,CAAC,kBAAkB;YAC/B,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;QAClD,KAAK,SAAS,CAAC,iBAAiB;YAC9B,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;QACrD,KAAK,SAAS,CAAC,0BAA0B;YACvC,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC;QAC3D;YACE,OAAQ,SAA6B,CAAC;KACzC;AACH,CAAC","sourcesContent":["import {\n  AppEntryType,\n  DHTOp,\n  DHTOpType,\n  Entry,\n  EntryType,\n  Hash,\n} from '@holochain-open-dev/core-types';\nimport { hash } from '../../processors/hash';\n\nexport function hashEntry(entry: Entry): Hash {\n  if (entry.entry_type === 'Agent') return entry.content;\n  return hash(entry);\n}\n\nexport function getAppEntryType(\n  entryType: EntryType\n): AppEntryType | undefined {\n  if ((entryType as { App: AppEntryType }).App)\n    return (entryType as { App: AppEntryType }).App;\n  return undefined;\n}\n\nexport function getEntryTypeString(entryType: EntryType): string {\n  const appEntryType = getAppEntryType(entryType);\n  // TODO: FIX\n  if (appEntryType) return appEntryType.id.toString();\n\n  return entryType as string;\n}\n\nexport function getDHTOpBasis(dhtOp: DHTOp): Hash {\n  switch (dhtOp.type) {\n    case DHTOpType.StoreElement:\n      return hash(dhtOp.header);\n    case DHTOpType.StoreEntry:\n      return dhtOp.header.header.content.entry_hash;\n    case DHTOpType.RegisterUpdatedContent:\n      return dhtOp.header.header.content.original_entry_address;\n    case DHTOpType.RegisterAgentActivity:\n      return dhtOp.header.header.content.author;\n    case DHTOpType.RegisterAddLink:\n      return dhtOp.header.header.content.base_address;\n    case DHTOpType.RegisterRemoveLink:\n      return dhtOp.header.header.content.base_address;\n    case DHTOpType.RegisterDeletedBy:\n      return dhtOp.header.header.content.deletes_address;\n    case DHTOpType.RegisterDeletedEntryHeader:\n      return dhtOp.header.header.content.deletes_entry_address;\n    default:\n      return (undefined as unknown) as Hash;\n  }\n}\n"]}