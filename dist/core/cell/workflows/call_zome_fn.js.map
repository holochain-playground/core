{"version":3,"file":"call_zome_fn.js","sourceRoot":"","sources":["../../../../src/core/cell/workflows/call_zome_fn.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAEzD;;;GAGG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,QAAgB,EAChB,MAAc,EACd,OAAY,EACZ,GAAW,EACX,EAAE,CAAC,KAAK,EAAE,IAAU,EAAgB,EAAE;IACtC,MAAM,aAAa,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEhD,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IACnC,IAAI,CAAC,GAAG;QACN,MAAM,IAAI,KAAK,CACb,+DAA+D,CAChE,CAAC;IAEJ,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;IACtE,IAAI,SAAS,GAAG,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,kCAAkC,QAAQ,cAAc,CAAC,CAAC;IAE5E,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC;QAC9C,MAAM,IAAI,KAAK,CACb,mCAAmC,MAAM,+BAA+B,QAAQ,EAAE,CACnF,CAAC;IAEJ,MAAM,OAAO,GAAgB,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CACtE,OAAO,CACR,CAAC;IAEF,IAAI,MAAM,CAAC;IACX,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAE9C,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEhC,MAAM,GAAG,OAAO,CAAC;KAClB;IAED,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,aAAa,EAAE;QAC9C,gBAAgB;QAEhB,gCAAgC;QAChC,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;KAClD;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { Cell } from '../../cell';\nimport { HdkAction } from '../source-chain/actions';\nimport { putElement } from '../source-chain/put';\nimport { getTipOfChain } from '../source-chain/utils';\nimport { produce_dht_ops_task } from './produce_dht_ops';\n\n/**\n * Calls the zome function of the cell DNA\n * This can only be called in the simulated mode: we can assume that cell.simulatedDna exists\n */\nexport const callZomeFn = (\n  zomeName: string,\n  fnName: string,\n  payload: any,\n  cap: string\n) => async (cell: Cell): Promise<any> => {\n  const currentHeader = getTipOfChain(cell.state);\n\n  const dna = cell.getSimulatedDna();\n  if (!dna)\n    throw new Error(\n      `Trying to do a simulated call to a cell that is not simulated`\n    );\n\n  const zomeIndex = dna.zomes.findIndex(zome => zome.name === zomeName);\n  if (zomeIndex < 0)\n    throw new Error(`There is no zome with the name ${zomeName} in this DNA`);\n\n  if (!dna.zomes[zomeIndex].zome_functions[fnName])\n    throw new Error(\n      `There is function with the name ${fnName} in this zome with the name ${zomeName}`\n    );\n\n  const actions: HdkAction[] = dna.zomes[zomeIndex].zome_functions[fnName](\n    payload\n  );\n\n  let result;\n  for (const action of actions) {\n    const element = await action(zomeIndex, cell);\n\n    putElement(element)(cell.state);\n\n    result = element;\n  }\n\n  if (getTipOfChain(cell.state) != currentHeader) {\n    // Do validation\n\n    // Trigger production of DHT Ops\n    cell.triggerWorkflow(produce_dht_ops_task(cell));\n  }\n\n  return result;\n};\n"]}