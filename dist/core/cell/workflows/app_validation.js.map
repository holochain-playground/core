{"version":3,"file":"app_validation.js","sourceRoot":"","sources":["../../../../src/core/cell/workflows/app_validation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAG7D,OAAO,EACL,qBAAqB,EAErB,gBAAgB,GACjB,MAAM,UAAU,CAAC;AAClB,OAAO,EAAE,wBAAwB,EAAE,MAAM,YAAY,CAAC;AACtD,OAAO,EACL,0BAA0B,EAC1B,wBAAwB,GACzB,MAAM,YAAY,CAAC;AACpB,OAAO,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAE7D,yHAAyH;AACzH,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,IAAU,EAAiB,EAAE;IAChE,MAAM,aAAa,GAAG,wBAAwB,CAC5C,IAAI,CAAC,KAAK,EACV,qBAAqB,CAAC,YAAY,CACnC,CAAC;IAEF,0BAA0B;IAC1B,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;QACrD,MAAM,SAAS,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;QAChD,0BAA0B,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElD,MAAM,oBAAoB,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;QAEzD,MAAM,KAAK,GAA0B;YACnC,EAAE,EAAE,oBAAoB,CAAC,EAAE;YAC3B,iBAAiB,EAAE,gBAAgB,CAAC,KAAK;SAC1C,CAAC;QAEF,wBAAwB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACxD;IAED,IAAI,CAAC,eAAe,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC;AAEF,MAAM,UAAU,mBAAmB,CAAC,IAAU;IAC5C,OAAO;QACL,IAAI,EAAE,8BAA8B;QACpC,WAAW,EAAE,2CAA2C;QACxD,IAAI,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC;KACjC,CAAC;AACJ,CAAC","sourcesContent":["import { deserializeHash } from '@holochain-open-dev/common';\nimport { Task } from '../../../executor/executor';\nimport { Cell } from '../../cell';\nimport {\n  ValidationLimboStatus,\n  IntegrationLimboValue,\n  ValidationStatus,\n} from '../state';\nimport { getValidationLimboDhtOps } from '../dht/get';\nimport {\n  deleteValidationLimboValue,\n  putIntegrationLimboValue,\n} from '../dht/put';\nimport { integrate_dht_ops_task } from './integrate_dht_ops';\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/app_validation_workflow.rs\nexport const app_validation = async (cell: Cell): Promise<void> => {\n  const pendingDhtOps = getValidationLimboDhtOps(\n    cell.state,\n    ValidationLimboStatus.SysValidated\n  );\n\n  // TODO: actually validate\n  for (const dhtOpHashStr of Object.keys(pendingDhtOps)) {\n    const dhtOpHash = deserializeHash(dhtOpHashStr);\n    deleteValidationLimboValue(dhtOpHash)(cell.state);\n\n    const validationLimboValue = pendingDhtOps[dhtOpHashStr];\n\n    const value: IntegrationLimboValue = {\n      op: validationLimboValue.op,\n      validation_status: ValidationStatus.Valid,\n    };\n\n    putIntegrationLimboValue(dhtOpHash, value)(cell.state);\n  }\n\n  cell.triggerWorkflow(integrate_dht_ops_task(cell));\n};\n\nexport function app_validation_task(cell: Cell): Task<void> {\n  return {\n    name: 'App Validation of the DHT Op',\n    description: 'Running of the zome appropriate zome hook',\n    task: () => app_validation(cell),\n  };\n}\n"]}