{"version":3,"file":"publish_dht_ops.js","sourceRoot":"","sources":["../../../../src/core/cell/workflows/publish_dht_ops.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAI5E,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAEzC,MAAM,UAAU,oBAAoB,CAAC,IAAU;IAC7C,OAAO;QACL,IAAI,EAAE,iBAAiB;QACvB,WAAW,EACT,yFAAyF;QAC3F,IAAI,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;KAClC,CAAC;AACJ,CAAC;AAED,0HAA0H;AAC1H,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,IAAU,EAAiB,EAAE;IACjE,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEjD,MAAM,aAAa,GAAkC,EAAE,CAAC;IAExD,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QAC3C,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;YAAE,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAErD,aAAa,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;KACzC;IAED,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,CAChD,KAAK,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE;QACxB,yBAAyB;QACzB,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;QAEvD,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC3C,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SACrE;IACH,CAAC,CACF,CAAC;IAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC,CAAC","sourcesContent":["import { deserializeHash, serializeHash } from '@holochain-open-dev/common';\nimport { DHTOp, Dictionary } from '@holochain-open-dev/core-types';\nimport { Task } from '../../../executor/executor';\nimport { Cell } from '../../cell';\nimport { getNonPublishedDhtOps } from '../source-chain/utils';\nimport { getDHTOpBasis } from '../utils';\n\nexport function publish_dht_ops_task(cell: Cell): Task<void> {\n  return {\n    name: 'Publish DHT Ops',\n    description:\n      'Read the elements in the authored DHT Ops that have not been published and publish them',\n    task: () => publish_dht_ops(cell),\n  };\n}\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/publish_dht_ops_workflow.rs\nexport const publish_dht_ops = async (cell: Cell): Promise<void> => {\n  const dhtOps = getNonPublishedDhtOps(cell.state);\n\n  const dhtOpsByBasis: Dictionary<Dictionary<DHTOp>> = {};\n\n  for (const dhtOpHash of Object.keys(dhtOps)) {\n    const dhtOp = dhtOps[dhtOpHash];\n    const basis = serializeHash(getDHTOpBasis(dhtOp));\n\n    if (!dhtOpsByBasis[basis]) dhtOpsByBasis[basis] = {};\n\n    dhtOpsByBasis[basis][dhtOpHash] = dhtOp;\n  }\n\n  const promises = Object.entries(dhtOpsByBasis).map(\n    async ([basis, dhtOps]) => {\n      // Publish the operations\n      await cell.p2p.publish(deserializeHash(basis), dhtOps);\n\n      for (const dhtOpHash of Object.keys(dhtOps)) {\n        cell.state.authoredDHTOps[dhtOpHash].last_publish_time = Date.now();\n      }\n    }\n  );\n\n  await Promise.all(promises);\n};\n"]}