{"version":3,"file":"put.js","sourceRoot":"","sources":["../../../../src/core/cell/dht/put.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAGL,QAAQ,EACR,SAAS,EACT,UAAU,EACV,WAAW,EAIX,cAAc,GAEf,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAOhD,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAErC,OAAO,EAAE,kBAAkB,EAAE,MAAM,OAAO,CAAC;AAE3C,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,SAAe,EACf,oBAA0C,EAC1C,EAAE,CAAC,CAAC,KAAgB,EAAE,EAAE;IACxB,KAAK,CAAC,eAAe,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,oBAAoB,CAAC;AACzE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,SAAe,EAAE,EAAE,CAAC,CAC7D,KAAgB,EAChB,EAAE;IACF,MAAM,IAAI,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;IACtC,OAAO,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,SAAe,EACf,qBAA4C,EAC5C,EAAE,CAAC,CAAC,KAAgB,EAAE,EAAE;IACxB,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,qBAAqB,CAAC;AAC3E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,EAAE,KAAgB,EAAE,EAAE;IACvE,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACtC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;IAEpD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAE9B,IAAI,KAAK,EAAE;QACT,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QACnC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC;KAC7C;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAY,EAAE,EAAE,CAAC,CAAC,KAAgB,EAAE,EAAE;IACrE,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAEtC,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,YAAY,EAAE;QACzC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC;KACtE;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,UAAU,EAAE;QAC9C,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;QAEzD,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,UAAU,CAAC,MAAM,EAAE;YAC1D,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC;YACzE,wBAAwB,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC;SACzE;QAED,wBAAwB,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC;QACxE,uBAAuB,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC;KAC3C;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,qBAAqB,EAAE;QACzD,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,GAAG;YACpD,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS;SACjD,CAAC;QAEF,KAAK,CAAC,QAAQ,CAAC,SAAS,CACtB,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAClD,GAAG;YACF,WAAW,EAAE,WAAW,CAAC,KAAK;SAC/B,CAAC;KACH;SAAM,IACL,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,sBAAsB;QAC/C,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,sBAAsB,EAC/C;QACA,wBAAwB,CACtB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,EACnD,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAC5B,CAAC,KAAK,CAAC,CAAC;QACT,wBAAwB,CACtB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAClD,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAC5B,CAAC,KAAK,CAAC,CAAC;QACT,uBAAuB,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,CACzE,KAAK,CACN,CAAC;KACH;SAAM,IACL,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,iBAAiB;QAC1C,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,0BAA0B,EACnD;QACA,wBAAwB,CACtB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,EAC3C,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAC5B,CAAC,KAAK,CAAC,CAAC;QACT,wBAAwB,CACtB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,EACjD,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAC5B,CAAC,KAAK,CAAC,CAAC;QAET,uBAAuB,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,CACxE,KAAK,CACN,CAAC;KACH;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,eAAe,EAAE;QACnD,MAAM,GAAG,GAAgB;YACvB,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY;YAC9C,WAAW,EAAE,UAAU;YACvB,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG;YACpC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO;SAC7C,CAAC;QACF,MAAM,KAAK,GAAgB;YACzB,aAAa,EAAE,UAAU;YACzB,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG;YACpC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc;YAClD,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS;YAChD,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO;SAC7C,CAAC;QACF,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;KAC/C;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,kBAAkB,EAAE;QACtD,MAAM,GAAG,GAAe;YACtB,UAAU,EAAE,UAAU;SACvB,CAAC;QAEF,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;KAC7E;AACH,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,CAAC,SAAe,EAAE,EAAE,CAAC,CAAC,KAAgB,EAAE,EAAE;IACxE,MAAM,OAAO,GAAG,kBAAkB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAErD,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACzC,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3E,OAAO,UAAU;YACf,CAAC,CAAC,UAAU,CAAC,IAAI,CACb,OAAO,CAAC,EAAE,CACP,OAEC,CAAC,MAAM,CACZ;YACH,CAAC,CAAC,IAAI,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG;QACnD,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI;KACtE,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,KAAW,EAAE,MAAc,EAAE,EAAE,CAAC,CACvE,KAAgB,EAChB,EAAE;IACF,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,IAAI,KAA6B,CAAC;IAClC,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,MAAM,EAAE;QACrC,KAAK,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;KAClC;SAAM,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,MAAM,EAAE;QAC5C,KAAK,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;KAChC;SAAM,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,MAAM,EAAE;QAC5C,KAAK,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;KAChC;IAED,IAAI,KAAK,EAAE;QACT,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;KACxC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAAW,EAAE,KAAiB,EAAE,EAAE,CAAC,CACnE,KAAgB,EAChB,EAAE;IACF,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACtC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;QACzC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;KAC3C;IAED,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACnD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,SAAe,EACf,eAAsC,EACtC,EAAE,CAAC,CAAC,KAAgB,EAAE,EAAE;IACxB,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,eAAe,CAAC;AACrE,CAAC,CAAC","sourcesContent":["import { serializeHash } from '@holochain-open-dev/common';\nimport {\n  Hash,\n  DHTOp,\n  getEntry,\n  DHTOpType,\n  HeaderType,\n  ChainStatus,\n  LinkMetaKey,\n  LinkMetaVal,\n  SysMetaVal,\n  EntryDhtStatus,\n  Header,\n} from '@holochain-open-dev/core-types';\nimport { hash } from '../../../processors/hash';\nimport {\n  ValidationLimboValue,\n  CellState,\n  IntegrationLimboValue,\n  IntegratedDhtOpsValue,\n} from '../state';\nimport { hashEntry } from '../utils';\n\nimport { getHeadersForEntry } from './get';\n\nexport const putValidationLimboValue = (\n  dhtOpHash: Hash,\n  validationLimboValue: ValidationLimboValue\n) => (state: CellState) => {\n  state.validationLimbo[serializeHash(dhtOpHash)] = validationLimboValue;\n};\n\nexport const deleteValidationLimboValue = (dhtOpHash: Hash) => (\n  state: CellState\n) => {\n  const hash = serializeHash(dhtOpHash);\n  delete state.validationLimbo[hash];\n};\n\nexport const putIntegrationLimboValue = (\n  dhtOpHash: Hash,\n  integrationLimboValue: IntegrationLimboValue\n) => (state: CellState) => {\n  state.integrationLimbo[serializeHash(dhtOpHash)] = integrationLimboValue;\n};\n\nexport const putDhtOpData = (dhtOp: DHTOp) => async (state: CellState) => {\n  const headerHash = hash(dhtOp.header);\n  state.CAS[serializeHash(headerHash)] = dhtOp.header;\n\n  const entry = getEntry(dhtOp);\n\n  if (entry) {\n    const entryHash = hashEntry(entry);\n    state.CAS[serializeHash(entryHash)] = entry;\n  }\n};\n\nexport const putDhtOpMetadata = (dhtOp: DHTOp) => (state: CellState) => {\n  const headerHash = hash(dhtOp.header);\n\n  if (dhtOp.type === DHTOpType.StoreElement) {\n    state.metadata.misc_meta[serializeHash(headerHash)] = 'StoreElement';\n  } else if (dhtOp.type === DHTOpType.StoreEntry) {\n    const entryHash = dhtOp.header.header.content.entry_hash;\n\n    if (dhtOp.header.header.content.type === HeaderType.Update) {\n      register_header_on_basis(headerHash, dhtOp.header.header.content)(state);\n      register_header_on_basis(entryHash, dhtOp.header.header.content)(state);\n    }\n\n    register_header_on_basis(entryHash, dhtOp.header.header.content)(state);\n    update_entry_dht_status(entryHash)(state);\n  } else if (dhtOp.type === DHTOpType.RegisterAgentActivity) {\n    state.metadata.misc_meta[serializeHash(headerHash)] = {\n      ChainItem: dhtOp.header.header.content.timestamp,\n    };\n\n    state.metadata.misc_meta[\n      serializeHash(dhtOp.header.header.content.author)\n    ] = {\n      ChainStatus: ChainStatus.Valid,\n    };\n  } else if (\n    dhtOp.type === DHTOpType.RegisterUpdatedContent ||\n    dhtOp.type === DHTOpType.RegisterUpdatedElement\n  ) {\n    register_header_on_basis(\n      dhtOp.header.header.content.original_header_address,\n      dhtOp.header.header.content\n    )(state);\n    register_header_on_basis(\n      dhtOp.header.header.content.original_entry_address,\n      dhtOp.header.header.content\n    )(state);\n    update_entry_dht_status(dhtOp.header.header.content.original_entry_address)(\n      state\n    );\n  } else if (\n    dhtOp.type === DHTOpType.RegisterDeletedBy ||\n    dhtOp.type === DHTOpType.RegisterDeletedEntryHeader\n  ) {\n    register_header_on_basis(\n      dhtOp.header.header.content.deletes_address,\n      dhtOp.header.header.content\n    )(state);\n    register_header_on_basis(\n      dhtOp.header.header.content.deletes_entry_address,\n      dhtOp.header.header.content\n    )(state);\n\n    update_entry_dht_status(dhtOp.header.header.content.deletes_entry_address)(\n      state\n    );\n  } else if (dhtOp.type === DHTOpType.RegisterAddLink) {\n    const key: LinkMetaKey = {\n      base: dhtOp.header.header.content.base_address,\n      header_hash: headerHash,\n      tag: dhtOp.header.header.content.tag,\n      zome_id: dhtOp.header.header.content.zome_id,\n    };\n    const value: LinkMetaVal = {\n      link_add_hash: headerHash,\n      tag: dhtOp.header.header.content.tag,\n      target: dhtOp.header.header.content.target_address,\n      timestamp: dhtOp.header.header.content.timestamp,\n      zome_id: dhtOp.header.header.content.zome_id,\n    };\n    state.metadata.link_meta.push({ key, value });\n  } else if (dhtOp.type === DHTOpType.RegisterRemoveLink) {\n    const val: SysMetaVal = {\n      DeleteLink: headerHash,\n    };\n\n    putSystemMetadata(dhtOp.header.header.content.link_add_address, val)(state);\n  }\n};\n\nconst update_entry_dht_status = (entryHash: Hash) => (state: CellState) => {\n  const headers = getHeadersForEntry(state, entryHash);\n\n  const entryIsAlive = headers.some(header => {\n    const dhtHeaders = state.metadata.system_meta[serializeHash(hash(header))];\n    return dhtHeaders\n      ? dhtHeaders.find(\n          metaVal =>\n            (metaVal as {\n              Delete: Hash;\n            }).Delete\n        )\n      : true;\n  });\n\n  state.metadata.misc_meta[serializeHash(entryHash)] = {\n    EntryStatus: entryIsAlive ? EntryDhtStatus.Live : EntryDhtStatus.Dead,\n  };\n};\n\nexport const register_header_on_basis = (basis: Hash, header: Header) => (\n  state: CellState\n) => {\n  const headerHash = hash(header);\n  let value: SysMetaVal | undefined;\n  if (header.type === HeaderType.Create) {\n    value = { NewEntry: headerHash };\n  } else if (header.type === HeaderType.Update) {\n    value = { Update: headerHash };\n  } else if (header.type === HeaderType.Delete) {\n    value = { Delete: headerHash };\n  }\n\n  if (value) {\n    putSystemMetadata(basis, value)(state);\n  }\n};\n\nexport const putSystemMetadata = (basis: Hash, value: SysMetaVal) => (\n  state: CellState\n) => {\n  const basisStr = serializeHash(basis);\n  if (!state.metadata.system_meta[basisStr]) {\n    state.metadata.system_meta[basisStr] = [];\n  }\n\n  state.metadata.system_meta[basisStr].push(value);\n};\n\nexport const putDhtOpToIntegrated = (\n  dhtOpHash: Hash,\n  integratedValue: IntegratedDhtOpsValue\n) => (state: CellState) => {\n  state.integratedDHTOps[serializeHash(dhtOpHash)] = integratedValue;\n};\n"]}