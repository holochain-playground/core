{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../../src/core/cell/dht/get.ts"],"names":[],"mappings":"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","sourcesContent":["import { deserializeHash, serializeHash } from '@holochain-open-dev/common';\nimport {\n  Dictionary,\n  Hash,\n  Header,\n  getSysMetaValHeaderHash,\n  LinkMetaVal,\n  EntryDhtStatus,\n  EntryDetails,\n  NewEntryHeader,\n  SignedHeaderHashed,\n} from '@holochain-open-dev/core-types';\nimport { uniq } from 'lodash-es';\nimport {\n  CellState,\n  ValidationLimboStatus,\n  ValidationLimboValue,\n  IntegrationLimboValue,\n} from '../state';\n\nexport function getValidationLimboDhtOps(\n  state: CellState,\n  status: ValidationLimboStatus\n): Dictionary<ValidationLimboValue> {\n  const pendingDhtOps: Dictionary<ValidationLimboValue> = {};\n\n  for (const dhtOpHash of Object.keys(state.validationLimbo)) {\n    const limboValue = state.validationLimbo[dhtOpHash];\n\n    if (limboValue.status === status) {\n      pendingDhtOps[dhtOpHash] = limboValue;\n    }\n  }\n\n  return pendingDhtOps;\n}\n\nexport function pullAllIntegrationLimboDhtOps(\n  state: CellState\n): Dictionary<IntegrationLimboValue> {\n  const dhtOps = state.integrationLimbo;\n\n  state.integrationLimbo = {};\n\n  return dhtOps;\n}\n\nexport function getHeadersForEntry(\n  state: CellState,\n  entryHash: Hash\n): SignedHeaderHashed[] {\n  return state.metadata.system_meta[serializeHash(entryHash)]\n    .map(h => {\n      const hash = getSysMetaValHeaderHash(h);\n      if (hash) {\n        return state.CAS[serializeHash(hash)];\n      }\n      return undefined;\n    })\n    .filter(header => !!header);\n}\n\nexport function getLinksForEntry(\n  state: CellState,\n  entryHash: Hash\n): LinkMetaVal[] {\n  return state.metadata.link_meta\n    .filter(({ key, value }) => (key.base = entryHash))\n    .map(({ key, value }) => value);\n}\n\nexport function getEntryDhtStatus(\n  state: CellState,\n  entryHash: Hash\n): EntryDhtStatus | undefined {\n  const meta = state.metadata.misc_meta[serializeHash(entryHash)];\n\n  return meta\n    ? (meta as {\n        EntryStatus: EntryDhtStatus;\n      }).EntryStatus\n    : undefined;\n}\n\nexport function getEntryDetails(\n  state: CellState,\n  entryHash: Hash\n): EntryDetails {\n  const entry = state.CAS[serializeHash(entryHash)];\n  const headers = getHeadersForEntry(state, entryHash);\n  const dhtStatus = getEntryDhtStatus(state, entryHash);\n\n  return {\n    entry,\n    headers: headers,\n    entry_dht_status: dhtStatus as EntryDhtStatus,\n  };\n}\n\nexport function getAllHeldEntries(state: CellState): Hash[] {\n  const allHeaders = Object.values(state.integratedDHTOps).map(\n    dhtOpValue => dhtOpValue.op.header\n  );\n\n  const newEntryHeaders = allHeaders.filter(\n    h => (h.header.content as NewEntryHeader).entry_hash\n  );\n\n  const allEntryHashes = newEntryHeaders.map(\n    h => (h.header.content as NewEntryHeader).entry_hash\n  );\n\n  return uniq(allEntryHashes.map(serializeHash)).map(deserializeHash);\n}\n\nexport function isHoldingEntry(state: CellState, entryHash: Hash): boolean {\n  return state.metadata.system_meta[serializeHash(entryHash)] !== undefined;\n}\n\nexport interface EntryDHTInfo {\n  details: EntryDetails;\n  links: LinkMetaVal[];\n}\n\nexport function getDhtShard(state: CellState): Dictionary<EntryDHTInfo> {\n  const heldEntries = getAllHeldEntries(state);\n\n  const dhtShard: Dictionary<EntryDHTInfo> = {};\n\n  for (const entryHash of heldEntries) {\n    dhtShard[serializeHash(entryHash)] = {\n      details: getEntryDetails(state, entryHash),\n      links: getLinksForEntry(state, entryHash),\n    };\n  }\n\n  return dhtShard;\n}\n"]}