{"version":3,"file":"cell.js","sourceRoot":"","sources":["../../src/core/cell.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport {\n  CellId,\n  AgentPubKey,\n  getAgentPubKey,\n  Hash,\n  Dictionary,\n  DHTOp,\n} from '@holochain-open-dev/core-types';\nimport { Conductor } from './conductor';\nimport { genesis } from './cell/workflows/genesis';\nimport { Executor, Task } from '../executor/executor';\nimport { ImmediateExecutor } from '../executor/immediate-executor';\nimport { callZomeFn } from './cell/workflows/call_zome_fn';\nimport { SimulatedDna } from '../dnas/simulated-dna';\nimport { getCellId, getDnaHash } from './cell/source-chain/utils';\nimport { P2pCell } from './network/p2p-cell';\nimport { incoming_dht_ops } from './cell/workflows/incoming_dht_ops';\nimport { CellState } from './cell/state';\nimport { serializeHash } from '@holochain-open-dev/common';\n\nexport type CellSignal = 'after-workflow-executed' | 'before-workflow-executed';\nexport type CellSignalListener = (payload: any) => void;\n\nexport class Cell {\n  executor: Executor = new ImmediateExecutor();\n\n  #pendingWorkflows: Array<Task<any>> = [];\n\n  #signals = {\n    'after-workflow-executed': new Subject<Task<any>>(),\n    'before-workflow-executed': new Subject<Task<any>>(),\n  };\n\n  constructor(\n    public conductor: Conductor,\n    public state: CellState,\n    public p2p: P2pCell\n  ) {}\n\n  get cellId(): CellId {\n    return getCellId(this.state);\n  }\n\n  get agentPubKey(): AgentPubKey {\n    return getAgentPubKey(this.cellId);\n  }\n\n  get dnaHash(): Hash {\n    return getDnaHash(this.state);\n  }\n\n  get signals() {\n    return this.#signals;\n  }\n\n  getSimulatedDna() {\n    return this.conductor.registeredDnas[serializeHash(this.dnaHash)];\n  }\n\n  static async create(\n    conductor: Conductor,\n    cellId: CellId,\n    membrane_proof: any\n  ): Promise<Cell> {\n    const newCellState: CellState = {\n      CAS: {},\n      integrationLimbo: {},\n      metadata: {\n        link_meta: [],\n        misc_meta: {},\n        system_meta: {},\n      },\n      validationLimbo: {},\n      integratedDHTOps: {},\n      authoredDHTOps: {},\n      sourceChain: [],\n    };\n\n    const p2p = conductor.network.createP2pCell(cellId);\n\n    const cell = new Cell(conductor, newCellState, p2p);\n\n    await cell.executor.execute({\n      name: 'Genesis Workflow',\n      description: 'Initialize the cell with all the needed databases',\n      task: () => genesis(cellId[1], cellId[0], membrane_proof)(cell),\n    });\n\n    return cell;\n  }\n\n  getState(): CellState {\n    return this.state;\n  }\n\n  triggerWorkflow(workflow: Task<any>) {\n    this.#pendingWorkflows.push(workflow);\n\n    setTimeout(() => this._runPendingWorkflows());\n  }\n\n  async _runPendingWorkflows() {\n    const workflowsToRun = this.#pendingWorkflows;\n    this.#pendingWorkflows = [];\n\n    const promises = workflowsToRun.map(w => {\n      this.#signals['before-workflow-executed'].next(w);\n      this.executor\n        .execute(w)\n        .then(() => this.#signals['after-workflow-executed'].next(w));\n    });\n\n    await Promise.all(promises);\n  }\n\n  /** Workflows */\n\n  callZomeFn(args: {\n    zome: string;\n    fnName: string;\n    payload: any;\n    cap: string;\n  }): Promise<any> {\n    return this.executor.execute({\n      name: 'Call Zome Function Workflow',\n      description: `Zome: ${args.zome}, Function name: ${args.fnName}`,\n      task: () =>\n        callZomeFn(args.zome, args.fnName, args.payload, args.cap)(this),\n    });\n  }\n\n  /** Network handlers */\n  // https://github.com/holochain/holochain/blob/develop/crates/holochain/src/conductor/cell.rs#L429\n  public handle_publish(\n    from_agent: AgentPubKey,\n    dht_hash: Hash, // The basis for the DHTOps\n    ops: Dictionary<DHTOp>\n  ): Promise<void> {\n    return incoming_dht_ops(dht_hash, ops, from_agent)(this);\n  }\n}\n"]}