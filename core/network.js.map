{"version":3,"file":"network.js","sourceRoot":"","sources":["../../src/core/network.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAI5E,OAAO,EAAE,OAAO,EAAgB,MAAM,oBAAoB,CAAC;AAM3D,MAAM,OAAO,OAAO;IAOlB,YAAY,KAAmB;QAC7B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5C,EAAE,EAAE,CAAC,CAAC,EAAE;YACR,OAAO,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC;SAC1C,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,QAAQ;QACN,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACrC,EAAE,EAAE,CAAC,CAAC,EAAE;gBACR,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE;aAC5B,CAAC,CAAC;SACJ,CAAC;IACJ,CAAC;IAED,wDAAwD;IACxD,WAAW,CAAC,SAAoB;QAC9B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,KAAK,EAAE;gBAClC,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;oBACzC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;wBAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;oBAC3D,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;oBAE/D,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBACvC;aACF;SACF;IACH,CAAC;IAED,aAAa,CAAC,MAAc;QAC1B,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,iBAAiB,GAAG,iBAAiB;YACzC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC;YACrD,CAAC,CAAC,EAAE,CAAC;QAEP,MAAM,KAAK,GAAiB;YAC1B,KAAK,EAAE,iBAAiB;YACxB,gBAAgB,EAAE,CAAC;SACpB,CAAC;QAEF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAEjD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;QAE5C,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,WAAW,CAChB,GAAS,EACT,SAAe,EACf,OAAa,EACb,OAA0B;QAE1B,OAAO,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;CACF","sourcesContent":["import { deserializeHash, serializeHash } from '@holochain-open-dev/common';\nimport { CellId, Dictionary, Hash } from '@holochain-open-dev/core-types';\nimport { Cell } from './cell';\nimport { Conductor } from './conductor';\nimport { P2pCell, P2pCellState } from './network/p2p-cell';\n\nexport interface NetworkState {\n  p2pCellsState: Array<{ id: CellId; state: P2pCellState }>; // P2pCellState by dna hash\n}\n\nexport class Network {\n  // P2pCells contained in this conductor\n  p2pCells: Array<{ id: CellId; p2pCell: P2pCell }>;\n\n  // Cell connection segmentated by [dna][agent_pub_key]\n  peerCells: Dictionary<Dictionary<Cell>>;\n\n  constructor(state: NetworkState) {\n    this.p2pCells = state.p2pCellsState.map(s => ({\n      id: s.id,\n      p2pCell: new P2pCell(s.state, s.id, this),\n    }));\n    this.peerCells = {};\n  }\n\n  getState(): NetworkState {\n    return {\n      p2pCellsState: this.p2pCells.map(c => ({\n        id: c.id,\n        state: c.p2pCell.getState(),\n      })),\n    };\n  }\n\n  // TODO: change this to simulate networking if necessary\n  connectWith(conductor: Conductor) {\n    for (const myCell of this.p2pCells) {\n      const cellDna = serializeHash(myCell.id[1]);\n      for (const cell of conductor.cells) {\n        if (serializeHash(cell.id[1]) === cellDna) {\n          if (!this.peerCells[cellDna]) this.peerCells[cellDna] = {};\n          this.peerCells[cellDna][serializeHash(cell.id[0])] = cell.cell;\n\n          myCell.p2pCell.peers.push(cell.id[0]);\n        }\n      }\n    }\n  }\n\n  createP2pCell(cellId: CellId): P2pCell {\n    const peersOfTheSameDna = this.peerCells[serializeHash(cellId[1])];\n    const peersAlreadyKnown = peersOfTheSameDna\n      ? Object.keys(peersOfTheSameDna).map(deserializeHash)\n      : [];\n\n    const state: P2pCellState = {\n      peers: peersAlreadyKnown,\n      redundancyFactor: 3,\n    };\n\n    const p2pCell = new P2pCell(state, cellId, this);\n\n    this.p2pCells.push({ id: cellId, p2pCell });\n\n    return p2pCell;\n  }\n\n  public sendMessage<T>(\n    dna: Hash,\n    fromAgent: Hash,\n    toAgent: Hash,\n    message: NetworkMessage<T>\n  ): Promise<T> {\n    return message(this.peerCells[serializeHash(dna)][serializeHash(toAgent)]);\n  }\n}\n\nexport type NetworkMessage<T> = (cell: Cell) => Promise<T>;\n"]}