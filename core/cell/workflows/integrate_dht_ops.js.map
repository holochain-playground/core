{"version":3,"file":"integrate_dht_ops.js","sourceRoot":"","sources":["../../../../src/core/cell/workflows/integrate_dht_ops.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAI7D,OAAO,EAAE,6BAA6B,EAAE,MAAM,YAAY,CAAC;AAC3D,OAAO,EACL,YAAY,EACZ,gBAAgB,EAChB,oBAAoB,GACrB,MAAM,YAAY,CAAC;AAEpB,4HAA4H;AAC5H,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,IAAU,EAAiB,EAAE;IACnE,MAAM,cAAc,GAAG,6BAA6B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEjE,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;QACnD,MAAM,qBAAqB,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;QAExD,MAAM,KAAK,GAAG,qBAAqB,CAAC,EAAE,CAAC;QAEvC,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEpC,MAAM,KAAK,GAA0B;YACnC,EAAE,EAAE,KAAK;YACT,iBAAiB,EAAE,qBAAqB,CAAC,iBAAiB;YAC1D,eAAe,EAAE,IAAI,CAAC,GAAG,EAAE;SAC5B,CAAC;QAEF,oBAAoB,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACrE;AACH,CAAC,CAAC;AAEF,MAAM,UAAU,sBAAsB,CAAC,IAAU;IAC/C,OAAO;QACL,IAAI,EAAE,mBAAmB;QACzB,WAAW,EAAE,qDAAqD;QAClE,IAAI,EAAE,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;KACpC,CAAC;AACJ,CAAC","sourcesContent":["import { deserializeHash } from '@holochain-open-dev/common';\nimport { Task } from '../../../executor/executor';\nimport { Cell } from '../../cell';\nimport { IntegratedDhtOpsValue } from '../state';\nimport { pullAllIntegrationLimboDhtOps } from '../dht/get';\nimport {\n  putDhtOpData,\n  putDhtOpMetadata,\n  putDhtOpToIntegrated,\n} from '../dht/put';\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/integrate_dht_ops_workflow.rs\nexport const integrate_dht_ops = async (cell: Cell): Promise<void> => {\n  const opsToIntegrate = pullAllIntegrationLimboDhtOps(cell.state);\n\n  for (const dhtOpHash of Object.keys(opsToIntegrate)) {\n    const integrationLimboValue = opsToIntegrate[dhtOpHash];\n\n    const dhtOp = integrationLimboValue.op;\n\n    await putDhtOpData(dhtOp)(cell.state);\n    putDhtOpMetadata(dhtOp)(cell.state);\n\n    const value: IntegratedDhtOpsValue = {\n      op: dhtOp,\n      validation_status: integrationLimboValue.validation_status,\n      when_integrated: Date.now(),\n    };\n\n    putDhtOpToIntegrated(deserializeHash(dhtOpHash), value)(cell.state);\n  }\n};\n\nexport function integrate_dht_ops_task(cell: Cell): Task<void> {\n  return {\n    name: 'Integrate DHT Ops',\n    description: 'Integration of the validated DHTOp in our DHT shard',\n    task: () => integrate_dht_ops(cell),\n  };\n}\n"]}