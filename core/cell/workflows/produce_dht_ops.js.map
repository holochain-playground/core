{"version":3,"file":"produce_dht_ops.js","sourceRoot":"","sources":["../../../../src/core/cell/workflows/produce_dht_ops.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AAEjE,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAEhD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AACnD,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAEzD,MAAM,UAAU,oBAAoB,CAAC,IAAU;IAC7C,OAAO;QACL,IAAI,EAAE,iBAAiB;QACvB,WAAW,EACT,iFAAiF;QACnF,IAAI,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;KAClC,CAAC;AACJ,CAAC;AAED,0HAA0H;AAC1H,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,IAAU,EAAiB,EAAE;IACjE,MAAM,eAAe,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAElD,KAAK,MAAM,aAAa,IAAI,eAAe,EAAE;QAC3C,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;QAExC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAM,UAAU,GAAG;gBACjB,EAAE,EAAE,KAAK;gBACT,iBAAiB,EAAE,SAAS;gBAC5B,aAAa,EAAE,CAAC;aACjB,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,UAAU,CAAC;SAClE;KACF;IAED,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC","sourcesContent":["import { serializeHash } from '@holochain-open-dev/common';\nimport { elementToDHTOps } from '@holochain-open-dev/core-types';\nimport { Task } from '../../../executor/executor';\nimport { hash } from '../../../processors/hash';\nimport { Cell } from '../../cell';\nimport { getNewHeaders } from '../source-chain/get';\nimport { getElement } from '../source-chain/utils';\nimport { publish_dht_ops_task } from './publish_dht_ops';\n\nexport function produce_dht_ops_task(cell: Cell): Task<void> {\n  return {\n    name: 'Produce DHT Ops',\n    description:\n      'Read the new elements in the source chain and produce their appropriate DHT Ops',\n    task: () => produce_dht_ops(cell),\n  };\n}\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/produce_dht_ops_workflow.rs\nexport const produce_dht_ops = async (cell: Cell): Promise<void> => {\n  const newHeaderHashes = getNewHeaders(cell.state);\n\n  for (const newHeaderHash of newHeaderHashes) {\n    const element = getElement(cell.state, newHeaderHash);\n    const dhtOps = elementToDHTOps(element);\n\n    for (const dhtOp of dhtOps) {\n      const dhtOpHash = hash(dhtOp);\n      const dhtOpValue = {\n        op: dhtOp,\n        last_publish_time: undefined,\n        receipt_count: 0,\n      };\n\n      cell.state.authoredDHTOps[serializeHash(dhtOpHash)] = dhtOpValue;\n    }\n  }\n\n  cell.triggerWorkflow(publish_dht_ops_task(cell));\n};\n"]}