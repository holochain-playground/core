{"version":3,"file":"put.js","sourceRoot":"","sources":["../../../../src/core/cell/source-chain/put.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAGhD,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAE3D,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAgB,EAAE,EAAE,CAAC,CAAC,KAAgB,EAAQ,EAAE;IACzE,oBAAoB;IACpB,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAA;IACpD,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC;IAE7D,+BAA+B;IAC/B,IAAI,OAAO,CAAC,KAAK,EAAE;QACjB,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACtC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;KACrD;IAED,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACxC,CAAC,CAAC","sourcesContent":["import { hash } from '../../../processors/hash';\nimport { CellState } from '../state';\nimport { Element } from '@holochain-open-dev/core-types';\nimport { serializeHash } from '@holochain-open-dev/common';\n\nexport const putElement = (element: Element) => (state: CellState): void => {\n  // Put header in CAS\n  const headerHash = element.signed_header.header.hash\n  state.CAS[serializeHash(headerHash)] = element.signed_header;\n\n  // Put entry in CAS if it exist\n  if (element.entry) {\n    const entryHash = hash(element.entry);\n    state.CAS[serializeHash(entryHash)] = element.entry;\n  }\n\n  state.sourceChain.unshift(headerHash);\n};\n"]}