{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/core/cell/source-chain/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAKL,UAAU,GAMX,MAAM,gCAAgC,CAAC;AAGxC,MAAM,UAAU,aAAa,CAAC,SAAoB;IAChD,OAAO,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,SAAoB;IAC5C,OAAO,WAAW,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;AACzD,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAgB;IACzC,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAExE,MAAM,GAAG,GACP,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC;IAC5C,OAAO,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,SAAoB,EAAE,KAAa;IAC7D,MAAM,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAChD,OAAO,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,SAAoB;IACnD,OAAO,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC;AACtC,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAgB,EAAE,UAAgB;IAC3D,MAAM,aAAa,GACjB,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;IAEvC,IAAI,KAAK,CAAC;IACV,IACE,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,UAAU,CAAC,MAAM;QACtD,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,UAAU,CAAC,MAAM,EACtD;QACA,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;KAC3E;IACD,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAgB;IACxC,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAChC,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAC9B,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,KAAgB;IACpD,MAAM,kBAAkB,GAAsB,EAAE,CAAC;IACjD,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;QACzD,MAAM,aAAa,GAAG,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,aAAa,CAAC,iBAAiB,KAAK,SAAS,EAAE;YACjD,kBAAkB,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC,EAAE,CAAC;SAClD;KACF;IAED,OAAO,kBAAkB,CAAC;AAC5B,CAAC","sourcesContent":["import { serializeHash } from '@holochain-open-dev/common';\nimport {\n  Hash,\n  AgentPubKey,\n  Dna,\n  Header,\n  HeaderType,\n  CellId,\n  Element,\n  Dictionary,\n  DHTOp,\n  SignedHeaderHashed,\n} from '@holochain-open-dev/core-types';\nimport { CellState } from '../state';\n\nexport function getTipOfChain(cellState: CellState): Hash {\n  return cellState.sourceChain[0];\n}\n\nexport function getAuthor(cellState: CellState): AgentPubKey {\n  return getHeaderAt(cellState, 0).header.content.author;\n}\n\nexport function getDnaHash(state: CellState): Hash {\n  const firstHeaderHash = state.sourceChain[state.sourceChain.length - 1];\n\n  const dna: SignedHeaderHashed<Dna> =\n    state.CAS[serializeHash(firstHeaderHash)];\n  return dna.header.content.hash;\n}\n\nexport function getHeaderAt(cellState: CellState, index: number): SignedHeaderHashed {\n  const headerHash = cellState.sourceChain[index];\n  return cellState.CAS[serializeHash(headerHash)];\n}\n\nexport function getNextHeaderSeq(cellState: CellState): number {\n  return cellState.sourceChain.length;\n}\n\nexport function getElement(state: CellState, headerHash: Hash): Element {\n  const signed_header: SignedHeaderHashed =\n    state.CAS[serializeHash(headerHash)];\n\n  let entry;\n  if (\n    signed_header.header.content.type == HeaderType.Create ||\n    signed_header.header.content.type == HeaderType.Update\n  ) {\n    entry = state.CAS[serializeHash(signed_header.header.content.entry_hash)];\n  }\n  return { signed_header, entry };\n}\n\nexport function getCellId(state: CellState): CellId {\n  const author = getAuthor(state);\n  const dna = getDnaHash(state);\n  return [author, dna];\n}\n\nexport function getNonPublishedDhtOps(state: CellState): Dictionary<DHTOp> {\n  const nonPublishedDhtOps: Dictionary<DHTOp> = {};\n  for (const dhtOpHash of Object.keys(state.authoredDHTOps)) {\n    const authoredValue = state.authoredDHTOps[dhtOpHash];\n    if (authoredValue.last_publish_time === undefined) {\n      nonPublishedDhtOps[dhtOpHash] = authoredValue.op;\n    }\n  }\n\n  return nonPublishedDhtOps;\n}\n"]}