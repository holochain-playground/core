{"version":3,"file":"p2p-cell.js","sourceRoot":"","sources":["../../../src/core/network/p2p-cell.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAQjE,oGAAoG;AACpG,MAAM,OAAO,OAAO;IAKlB,YACE,KAAmB,EACT,MAAc,EACd,OAAgB;QADhB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAS;QAE1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAC3B,CAAC;IAED,QAAQ;QACN,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;SACxC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAa,EAAE,aAA0B,IAAkB,CAAC;IAEvE,KAAK,CAAC,KAAK,CAAC,OAAa,EAAE,aAA0B,IAAkB,CAAC;IAExE,KAAK,CAAC,OAAO,CAAC,QAAc,EAAE,GAAsB;QAClD,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CACzC,QAAQ,EACR,IAAI,CAAC,gBAAgB,CACtB,CAAC;QAEF,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CACxC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,CACnD,CACF,CAAC;QAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,GAAG,CACP,QAAc,EACd,UAAuB,EACvB,QAAc,EACd,QAAa,CAAC,kBAAkB;;QAEhC,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEO,oBAAoB,CAC1B,SAAe,EACf,aAAqB;QAErB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAY,EAAE,MAAY,EAAE,EAAE;YACjE,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YAC9C,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YAC9C,OAAO,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;IAC7C,CAAC;IAEO,YAAY,CAClB,OAAoB,EACpB,OAA0B;QAE1B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,EAAE;YACZ,QAAQ,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SACxC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAC7B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EACd,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EACd,OAAO,EACP,OAAO,CACR,CAAC;IACJ,CAAC;CACF","sourcesContent":["import {\n  AgentPubKey,\n  CellId,\n  DHTOp,\n  Dictionary,\n  Hash,\n} from '@holochain-open-dev/core-types';\nimport { compareBigInts, distance } from '../../processors/hash';\nimport { Network, NetworkMessage } from '../network';\n\nexport type P2pCellState = {\n  peers: Hash[];\n  redundancyFactor: number;\n};\n\n// From: https://github.com/holochain/holochain/blob/develop/crates/holochain_p2p/src/types/actor.rs\nexport class P2pCell {\n  peers: Hash[];\n\n  redundancyFactor!: number;\n\n  constructor(\n    state: P2pCellState,\n    protected cellId: CellId,\n    protected network: Network\n  ) {\n    this.peers = state.peers;\n  }\n\n  getState(): P2pCellState {\n    return {\n      peers: this.peers,\n      redundancyFactor: this.redundancyFactor,\n    };\n  }\n\n  async join(dnaHash: Hash, agent_pub_key: AgentPubKey): Promise<void> {}\n\n  async leave(dnaHash: Hash, agent_pub_key: AgentPubKey): Promise<void> {}\n\n  async publish(dht_hash: Hash, ops: Dictionary<DHTOp>): Promise<void> {\n    const neighbors = this._getClosestNeighbors(\n      dht_hash,\n      this.redundancyFactor\n    );\n\n    const promises = neighbors.map(neighbor =>\n      this._sendMessage(neighbor, cell =>\n        cell.handle_publish(this.cellId[0], dht_hash, ops)\n      )\n    );\n\n    await Promise.all(promises);\n  }\n\n  async get(\n    dna_hash: Hash,\n    from_agent: AgentPubKey,\n    dht_hash: Hash,\n    _options: any // TODO: complete?\n  ): Promise<Element | undefined> {\n    return undefined;\n  }\n\n  public getNeighbors(): Array<AgentPubKey> {\n    return this.peers;\n  }\n\n  private _getClosestNeighbors(\n    basisHash: Hash,\n    neighborCount: number\n  ): Array<AgentPubKey> {\n    const sortedPeers = this.peers.sort((agentA: Hash, agentB: Hash) => {\n      const distanceA = distance(basisHash, agentA);\n      const distanceB = distance(basisHash, agentB);\n      return compareBigInts(distanceA, distanceB);\n    });\n\n    return sortedPeers.slice(0, neighborCount);\n  }\n\n  private _sendMessage<T>(\n    toAgent: AgentPubKey,\n    message: NetworkMessage<T>\n  ): Promise<T> {\n    const agentId = this.peers.find(agent => agent === toAgent);\n\n    if (!agentId) {\n      debugger;\n      throw new Error('Agent was not found');\n    }\n\n    return this.network.sendMessage(\n      this.cellId[1],\n      this.cellId[0],\n      agentId,\n      message\n    );\n  }\n}\n"]}